"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/react/index.ts
var react_exports = {};
__export(react_exports, {
  Provider: () => Provider,
  SaleorAuthProvider: () => SaleorAuthProvider,
  createSafeContext: () => createSafeContext,
  useAuthChange: () => useAuthChange,
  useSaleorAuthContext: () => useSaleorAuthContext,
  useSaleorExternalAuth: () => useSaleorExternalAuth
});
module.exports = __toCommonJS(react_exports);

// src/react/context.ts
var import_react = require("react");

// src/SaleorRefreshTokenStorageHandler.ts
var getStorageAuthEventKey = (prefix) => [prefix, "saleor_storage_auth_change"].filter(Boolean).join("+");

// src/graphql.ts
var TypedDocumentString = class extends String {
  constructor(value, __meta__) {
    super(value);
    this.value = value;
    this.__meta__ = __meta__;
  }
  __apiType;
  toString() {
    return this.value;
  }
};

// src/utils.ts
var getRequestData = (query, variables, requestInit) => ({
  ...requestInit,
  method: "POST",
  headers: {
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    query,
    variables
  })
});

// src/mutations.ts
var accountErrorFragment = (
  /* graphql */
  `
  fragment AccountErrorFragment on AccountError {
    code
    field
    message
  }
`
);
var TOKEN_REFRESH = new TypedDocumentString(
  /* graphql */
  `
  ${accountErrorFragment}
  mutation refreshToken($refreshToken: String!) {
    tokenRefresh(refreshToken: $refreshToken) {
      token
      errors {
        ...AccountErrorFragment
      }
    }
  }
`
);
var TOKEN_CREATE = new TypedDocumentString(
  /* graphql */
  `
  mutation tokenCreate($email: String!, $password: String!) {
    tokenCreate(email: $email, password: $password) {
      token
      refreshToken
      errors {
        message
        field
        code
      }
    }
  }
`
);
var PASSWORD_RESET = new TypedDocumentString(
  /* graphql */
  `
  mutation passwordReset($email: String!, $password: String!, $token: String!) {
    setPassword(email: $email, password: $password, token: $token) {
      token
      refreshToken
      errors {
        message
        field
        code
      }
    }
  }
`
);
var ExternalAuthenticationURL = new TypedDocumentString(
  /* graphql */
  `
  mutation externalAuthenticationUrl($pluginId: String!, $input: JSONString!) {
    externalAuthenticationUrl(pluginId: $pluginId, input: $input) {
      authenticationData
      errors {
        code
        field
        message
      }
    }
  }
`
);
var ExternalObtainAccessTokens = new TypedDocumentString(
  /* graphql */
  `
  mutation AuthObtainAccessToken($pluginId: String!, $input: JSONString!) {
    externalObtainAccessTokens(pluginId: $pluginId, input: $input) {
      token
      refreshToken
      user {
        id
        email
      }
      errors {
        field
        code
        message
      }
    }
  }
`
);

// src/react/context.ts
var createSafeContext = () => {
  const context = (0, import_react.createContext)(void 0);
  function useSafeContext() {
    const value = (0, import_react.useContext)(context);
    if (value === void 0) {
      throw new Error("useContext must be inside a Provider with a value");
    }
    return value;
  }
  return [useSafeContext, context.Provider];
};
var [useSaleorAuthContext, Provider] = createSafeContext();

// src/react/SaleorAuthProvider.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var SaleorAuthProvider = ({ children, client }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Provider, { value: client, children });
};

// src/react/useAuthChange.ts
var import_react2 = require("react");
var useAuthChange = ({ saleorApiUrl, onSignedOut, onSignedIn }) => {
  const handleAuthChange = (event) => {
    const isCustomAuthEvent = event?.type === getStorageAuthEventKey(saleorApiUrl);
    if (!isCustomAuthEvent) {
      return;
    }
    const { authState } = event.detail;
    if (authState === "signedIn") {
      onSignedIn?.();
    } else if (authState === "signedOut") {
      onSignedOut?.();
    }
  };
  (0, import_react2.useEffect)(() => {
    if (typeof window === "undefined") {
      return;
    }
    window.addEventListener(getStorageAuthEventKey(saleorApiUrl), handleAuthChange);
    return () => {
      window.removeEventListener(getStorageAuthEventKey(saleorApiUrl), handleAuthChange);
    };
  }, []);
};

// src/react/useSaleorExternalAuth.ts
var import_react3 = require("react");

// src/SaleorExternalAuth.ts
var GraphQLError = class extends Error {
  constructor(errorResponse) {
    const message = errorResponse.errors.map((error) => error.message).join("\n");
    super(message);
    this.errorResponse = errorResponse;
    this.name = this.constructor.name;
    Object.setPrototypeOf(this, new.target.prototype);
  }
};
var SaleorExternalAuth = class {
  constructor(saleorURL, provider) {
    this.saleorURL = saleorURL;
    this.provider = provider;
  }
  async makePOSTRequest(query, variables) {
    const response = await fetch(this.saleorURL, getRequestData(query, variables));
    const result = await response.json();
    if ("errors" in result) {
      console.error(result.errors);
      throw new GraphQLError(result);
    }
    return result.data;
  }
  async initiate({ redirectURL }) {
    const {
      externalAuthenticationUrl: { authenticationData: data, errors }
    } = await this.makePOSTRequest(ExternalAuthenticationURL, {
      pluginId: this.provider,
      input: JSON.stringify({ redirectUri: redirectURL })
    });
    if (errors.length > 0) {
      console.error({ errors });
      throw new GraphQLError({ errors });
    }
    const { authorizationUrl } = JSON.parse(data);
    return authorizationUrl;
  }
  async obtainAccessToken({ code, state }) {
    const { externalObtainAccessTokens: data } = await this.makePOSTRequest(ExternalObtainAccessTokens, {
      pluginId: this.provider,
      input: JSON.stringify({ code, state })
    });
    return data;
  }
};

// src/react/useSaleorExternalAuth.ts
var useSaleorExternalAuth = ({
  saleorURL,
  provider,
  redirectURL
}) => {
  const [state, setState] = (0, import_react3.useState)({
    authURL: void 0,
    error: void 0,
    loading: true
  });
  (0, import_react3.useEffect)(() => {
    const triggerExternalAuth = async () => {
      try {
        const auth = new SaleorExternalAuth(saleorURL, provider);
        const result = await auth.initiate({ redirectURL });
        setState({ authURL: result, loading: false });
      } catch (error) {
        if (error instanceof Error) {
          setState({ loading: false, error: error.message });
        } else {
          setState({ loading: false, error: "Unknown error" });
        }
      }
    };
    void triggerExternalAuth();
  }, [saleorURL]);
  return state;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Provider,
  SaleorAuthProvider,
  createSafeContext,
  useAuthChange,
  useSaleorAuthContext,
  useSaleorExternalAuth
});
