import {
  getRequestData
} from "./chunk-IRFIDVVY.mjs";
import {
  ExternalAuthenticationURL,
  ExternalObtainAccessTokens
} from "./chunk-7JTFMRQS.mjs";

// src/SaleorExternalAuth.ts
var GraphQLError = class extends Error {
  constructor(errorResponse) {
    const message = errorResponse.errors.map((error) => error.message).join("\n");
    super(message);
    this.errorResponse = errorResponse;
    this.name = this.constructor.name;
    Object.setPrototypeOf(this, new.target.prototype);
  }
};
var SaleorExternalAuth = class {
  constructor(saleorURL, provider) {
    this.saleorURL = saleorURL;
    this.provider = provider;
  }
  async makePOSTRequest(query, variables) {
    const response = await fetch(this.saleorURL, getRequestData(query, variables));
    const result = await response.json();
    if ("errors" in result) {
      console.error(result.errors);
      throw new GraphQLError(result);
    }
    return result.data;
  }
  async initiate({ redirectURL }) {
    const {
      externalAuthenticationUrl: { authenticationData: data, errors }
    } = await this.makePOSTRequest(ExternalAuthenticationURL, {
      pluginId: this.provider,
      input: JSON.stringify({ redirectUri: redirectURL })
    });
    if (errors.length > 0) {
      console.error({ errors });
      throw new GraphQLError({ errors });
    }
    const { authorizationUrl } = JSON.parse(data);
    return authorizationUrl;
  }
  async obtainAccessToken({ code, state }) {
    const { externalObtainAccessTokens: data } = await this.makePOSTRequest(ExternalObtainAccessTokens, {
      pluginId: this.provider,
      input: JSON.stringify({ code, state })
    });
    return data;
  }
};

export {
  GraphQLError,
  SaleorExternalAuth
};
